
Craken 설계 특징
 - 자기 복제를 기반으로 한다. (마스터노드와 데이타노드를 구분하지 않는다. )
 - 관리 포인트와 Single Failure 지점을 최소화 한다. 
 - Peer To Peer가 아닌 BroadCast와 MapReduce 기반으로 통신한다. 
 







Embeding Adaptable : 기존의 서비스에 embedding 할수 있는 저장소 
	- Oracle처럼 별도 프로세스로 관리되어 통신을 통해 데이타를 저장하는게 아니라
	- 서비스는 embeding된 craken에 직접 저장하며 embeding된 craken끼리 통신이 이루어 진다.
	- 일종의 InMemoryDB와 비슷한데 각각의 Inmemeory Instance끼리 통신한다고 생각하면 된다.  


InMemory DataGrid : 
	- 최하위 저장구조는 Lucene의 API를 사용하여 영구 저장되지만
	- 상위 API는 분산 캐쉬를 통해 데이타를 읽어오기 때문에
	- 데이타를 저장하지 않고 분산 캐쉬로 활용 할수 있다.
	- 또는 각 Node들은 BroadCast 된다는 특징을 이용하고 MemberNode간 Message 교환하는 서비스를 작성할 수 있다.      


Schema-Free : RDB의 테이블 구조가 아닌 Tree Document Model
	- JCR의 Node & Property 구조로 저장한다. 
	- Node와 Node는 관계를 가지고 있다. 
	- Property는 number, string, date, blob 등의 type을 가진다. 
	- Node와 Node는 다대다 관계를 맺을 수 있다. 
	- Node는 path-based addressing 구조를 가진다. 
	- Node는 Lazy binding을 통해 일반 Object로 Mapping 하여 사용할 수 있다.
	- 전통적인 JDBC와 비슷한 Interface로 사용할 수 도 있다.(CallableStatement, ResultSet etc..)   
	
Replication 
	- Cluster에 참여한 각각의 Member Node들은 
	- 특정 이벤트(Start or Stop)나 원할 경우 모든 MemberNode에게 의제 제안을 BroadCast하고
	- 의제를 받은 모든 MemberNode들은 의제에 대한 답을 다시 BroadCast 함으로서 
	- MemberNode 모두 각각의 Node들에 대한 상태를 알 수 있다. 
	- BroadCaster 역할은 Hub 혹은 Database, S3, 별도의 서비스 프로그램이 할 수 있으며 이 지점이 Craken의 유일한 SF이다. 
	
	- Property Data와 Meta Data는 각 MemberNode에게 복제되며
	- Blob 데이타는 특정 사이즈로 Block별로 2개 이상의 복제본을 가지면서 분산되어 저장된다. 
	

Unified Content Management Strategy (Property / Index / BLOB 데이터를 모두 지원 )
	- RDB에 저장하던 Column 구조의 데이타와 
	- Search에서 사용할 수 있는 형태소 분석된 Indexed 데이타와
	- image 등의 Blob 데이타를 모두 지원함으로서
	- 별도 외부모듈과의 연동으로 발생하는 여러가지 문제점들과 SF를 최소화 하며
	- Craken을 사용하여 서비스 개발시 확장의 유연성이 향상된다. 


eventually notification
	- 각각의 memberNode의 start/stop과 
	- 각 Node 들에 대한 변경사항에 대한 event는 Listener 확장을 통해 감지해서 처리할수 있기 때문에
	- 각 MemberNode들이 최신상태를 알기위해 매번 통신할 필요가 없다. 
	- 자기 복제를 통해 데이타의 손실을 막고 Listener를 통해 이전의 안전한 다른 저장매체에 백업할 수 있다. 
	
	
	 
	